## üõçÔ∏è Aplica√ß√£o de Loja Virtual e API

### üìñ Sobre o Projeto

Este projeto foi desenvolvido como parte do **MBA DevXpert Full Stack .NET**, no **M√≥dulo 1: Introdu√ß√£o ao Desenvolvimento ASP.NET Core**.

O objetivo √© construir uma plataforma web simples, com interface intuitiva, que permita aos usu√°rios:

- Registrar-se e realizar login;
- Cadastrar, visualizar, editar e excluir **categorias** e **produtos**;
- Consumir e manipular os dados tamb√©m via **API RESTful**.

A aplica√ß√£o foi desenvolvida em **duas vers√µes independentes**:

- Uma interface **web MVC** constru√≠da com ASP.NET Core MVC;
- Uma **API RESTful** constru√≠da com ASP.NET Core Web API;

Ambas compartilham a mesma camada de regras de neg√≥cio (`TrabalhoLojaVirtualLibrary`), mas **n√£o se integram entre si** ‚Äî ou seja, o projeto MVC n√£o consome a API.

---

## üë®‚Äçüíª Autor

- **Alberto Luis Tarastchuk Borges**

---

## üéØ Proposta do Projeto

O projeto √© composto por:

- **Aplica√ß√£o MVC:**  
  Interface web da loja virtual, com opera√ß√µes completas de gerenciamento.

- **API RESTful:**  
  Permite integra√ß√£o com outros frontends e sistemas, fornecendo os mesmos recursos via endpoints.

- **Autentica√ß√£o e Autoriza√ß√£o:**  
  Sistema de login com controle de acesso para proteger rotas sens√≠veis.

- **Acesso a Dados:**  
  Implementado com **Entity Framework Core**, utilizando a abordagem **Code First**, com suporte a SQLite e SQL Server.

---

## üß∞ Tecnologias Utilizadas

### üî∑ Linguagem
- C#

### üî∑ Frameworks & Bibliotecas
- ASP.NET Core MVC
- ASP.NET Core Web API
- Entity Framework Core
- ASP.NET Core Identity
- Swagger (Swashbuckle)

### üî∑ Banco de Dados
- SQLite (default)
- SQL Server (opcional)

### üî∑ Seguran√ßa
- Autentica√ß√£o com Identity
- API com suporte a JWT (JSON Web Token)

### üî∑ Front-end
- Razor Views
- HTML5 / CSS3
- Bootstrap 5

---

## Estrutura

A estrutura do projeto est√° organizada da seguinte forma:

## Descri√ß√£o dos Projetos

- **TrabalhoLojaVirtualMVC**: Projeto respons√°vel pela interface web utilizando ASP.NET MVC.
- **TrabalhoLojaVirtualAPI**: Projeto de API RESTful que exp√µe dados e funcionalidades via endpoints HTTP.
- **TrabalhoLojaVirtualLibrary**: Biblioteca compartilhada que cont√©m as classes de modelo, regras de neg√≥cio, DbContext e opera√ß√µes CRUD.

## Outros Arquivos

- **README.md**: Este arquivo. Documenta√ß√£o geral da estrutura do projeto.
- **FEEDBACK.md**: Registro de sugest√µes, melhorias e observa√ß√µes sobre o projeto.
- **.gitignore**: Arquivo que define os itens ignorados pelo controle de vers√£o Git.

## Funcionalidades Implementadas

- **Gerenciamento de Categorias e Produtos:**  
  Funcionalidade completa de CRUD (Criar, Ler, Atualizar e Excluir) para categorias e produtos, dispon√≠vel tanto na interface web quanto na API.

- **Autentica√ß√£o e Autoriza√ß√£o:**  
  Sistema b√°sico de controle de acesso com funcionalidades de registro e login, garantindo que apenas usu√°rios autenticados acessem √°reas protegidas.

- **API RESTful:**  
  Endpoints organizados seguindo boas pr√°ticas REST para integra√ß√£o com sistemas externos ou frontends independentes.

- **Documenta√ß√£o Interativa da API:**  
  Gera√ß√£o autom√°tica de documenta√ß√£o utilizando Swagger, permitindo visualiza√ß√£o e testes dos endpoints diretamente pelo navegador.


## üöÄ Como Executar o Projeto

### Pr√©-requisitos

- [.NET SDK 8.0](https://dotnet.microsoft.com/download) ou superior  
- [SQL Server](https://www.microsoft.com/pt-br/sql-server/sql-server-downloads)  
- [Visual Studio 2022](https://visualstudio.microsoft.com/pt-br/) ou qualquer IDE de sua prefer√™ncia  
- [Git](https://git-scm.com/)

---

### üì• Clonando o Reposit√≥rio

```bash
git clone https://github.com/devio25/Trabalho-Desenvolvedor.io.git
```

---

### ‚öôÔ∏è Configura√ß√£o do Banco de Dados

No arquivo `appsettings.json`, voc√™ pode escolher o banco de dados a ser utilizado:

- **SQLite (Padr√£o):**  
  J√° configurado por padr√£o. O banco ser√° gerado automaticamente e populado com dados iniciais via Seed.

- **SQL Server:**  
  Para usar, substitua a connection string padr√£o pela do SQL Server no `appsettings.json`.

---

### üíª Executando o Projeto MVC

1. No Visual Studio, defina o projeto `TrabalhoLojaVirtualMVC` como projeto de inicializa√ß√£o.
2. Execute a aplica√ß√£o.
3. Acesse via navegador: [https://localhost:7250/](https://localhost:7250/)

---

### üîå Executando a API

1. No Visual Studio, defina o projeto `TrabalhoLojaVirtualAPI` como projeto de inicializa√ß√£o.
2. Execute a aplica√ß√£o.
3. Acesse a documenta√ß√£o Swagger:  
   [https://localhost:7047/swagger/index.html](https://localhost:7047/swagger/index.html)

---

## üîê Instru√ß√µes de Configura√ß√£o

- **JWT (Autentica√ß√£o da API):**  
  As chaves de configura√ß√£o est√£o no `appsettings.json`.

- **Migrations (EF Core):**  
  As migrations s√£o gerenciadas pelo Entity Framework Core. O banco √© criado automaticamente e populado via Seed ‚Äî n√£o √© necess√°rio executar comandos adicionais.

---

## üìö Documenta√ß√£o da API

A documenta√ß√£o da API √© gerada automaticamente via Swagger.  
Ap√≥s iniciar o projeto `TrabalhoLojaVirtualAPI`, acesse:

üëâ [https://localhost:7047/swagger/index.html](https://localhost:7047/swagger/index.html)